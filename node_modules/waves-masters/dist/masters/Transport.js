'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PriorityQueue = require('../core/PriorityQueue');

var _PriorityQueue2 = _interopRequireDefault(_PriorityQueue);

var _SchedulingQueue2 = require('../core/SchedulingQueue');

var _SchedulingQueue3 = _interopRequireDefault(_SchedulingQueue2);

var _TimeEngine4 = require('../core/TimeEngine');

var _TimeEngine5 = _interopRequireDefault(_TimeEngine4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addDuplet(firstArray, secondArray, firstElement, secondElement) {
  firstArray.push(firstElement);
  secondArray.push(secondElement);
}

function removeDuplet(firstArray, secondArray, firstElement) {
  var index = firstArray.indexOf(firstElement);

  if (index >= 0) {
    var secondElement = secondArray[index];

    firstArray.splice(index, 1);
    secondArray.splice(index, 1);

    return secondElement;
  }

  return null;
}

// The Transported call is the base class of the adapters between
// different types of engines (i.e. transported, scheduled, play-controlled)
// The adapters are at the same time masters for the engines added to the transport
// and transported TimeEngines inserted into the transport's position-based pritority queue.

var Transported = function (_TimeEngine) {
  (0, _inherits3.default)(Transported, _TimeEngine);

  function Transported(transport, engine, start, duration, offset) {
    var stretch = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
    (0, _classCallCheck3.default)(this, Transported);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Transported.__proto__ || (0, _getPrototypeOf2.default)(Transported)).call(this));

    _this.master = transport;

    _this.__engine = engine;
    engine.master = _this;

    _this.__startPosition = start;
    _this.__endPosition = !isFinite(duration) ? Infinity : start + duration;
    _this.__offsetPosition = start + offset;
    _this.__stretchPosition = stretch;
    _this.__isRunning = false;
    return _this;
  }

  (0, _createClass3.default)(Transported, [{
    key: 'setBoundaries',
    value: function setBoundaries(start, duration) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var stretch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

      this.__startPosition = start;
      this.__endPosition = start + duration;
      this.__offsetPosition = start + offset;
      this.__stretchPosition = stretch;
      this.resetPosition();
    }
  }, {
    key: 'start',
    value: function start(time, position, speed) {}
  }, {
    key: 'stop',
    value: function stop(time, position) {}
  }, {
    key: 'resetPosition',
    value: function resetPosition(position) {
      if (position !== undefined) position += this.__offsetPosition;

      this.master.resetEnginePosition(this, position);
    }
  }, {
    key: 'syncPosition',
    value: function syncPosition(time, position, speed) {
      if (speed > 0) {
        if (position < this.__startPosition) {

          if (this.__isRunning) this.stop(time, position - this.__offsetPosition);

          this.__isRunning = false;
          return this.__startPosition;
        } else if (position < this.__endPosition) {
          this.start(time, position - this.__offsetPosition, speed);

          this.__isRunning = true;
          return this.__endPosition;
        }
      } else {
        if (position > this.__endPosition) {
          if (this.__isRunning) // if engine is running
            this.stop(time, position - this.__offsetPosition);

          this.__isRunning = false;
          return this.__endPosition;
        } else if (position > this.__startPosition) {
          this.start(time, position - this.__offsetPosition, speed);

          this.__isRunning = true;
          return this.__startPosition;
        }
      }

      if (this.__isRunning) // if engine is running
        this.stop(time, position);

      this.__isRunning = false;
      return Infinity * speed;
    }
  }, {
    key: 'advancePosition',
    value: function advancePosition(time, position, speed) {
      if (!this.__isRunning) {
        this.start(time, position - this.__offsetPosition, speed);
        this.__isRunning = true;

        if (speed > 0) return this.__endPosition;

        return this.__startPosition;
      }

      // stop engine
      this.stop(time, position - this.__offsetPosition);

      this.__isRunning = false;
      return Infinity * speed;
    }
  }, {
    key: 'syncSpeed',
    value: function syncSpeed(time, position, speed) {
      if (speed === 0) // stop
        this.stop(time, position - this.__offsetPosition);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.master = null;

      this.__engine.master = null;
      this.__engine = null;
    }
  }, {
    key: 'currentTime',
    get: function get() {
      return this.master.currentTime;
    }
  }, {
    key: 'audioTime',
    get: function get() {
      return this.master.audioTime;
    }
  }, {
    key: 'currentPosition',
    get: function get() {
      return this.master.currentPosition - this.__offsetPosition;
    }
  }]);
  return Transported;
}(_TimeEngine5.default);

// TransportedTransported
// has to switch on and off the scheduled engines when the transport hits the engine's start and end position


var TransportedTransported = function (_Transported) {
  (0, _inherits3.default)(TransportedTransported, _Transported);

  function TransportedTransported(transport, engine, startPosition, endPosition, offsetPosition) {
    (0, _classCallCheck3.default)(this, TransportedTransported);
    return (0, _possibleConstructorReturn3.default)(this, (TransportedTransported.__proto__ || (0, _getPrototypeOf2.default)(TransportedTransported)).call(this, transport, engine, startPosition, endPosition, offsetPosition));
  }

  (0, _createClass3.default)(TransportedTransported, [{
    key: 'syncPosition',
    value: function syncPosition(time, position, speed) {
      if (speed > 0 && position < this.__endPosition) position = Math.max(position, this.__startPosition);else if (speed < 0 && position >= this.__startPosition) position = Math.min(position, this.__endPosition);

      return this.__offsetPosition + this.__engine.syncPosition(time, position - this.__offsetPosition, speed);
    }
  }, {
    key: 'advancePosition',
    value: function advancePosition(time, position, speed) {
      position = this.__offsetPosition + this.__engine.advancePosition(time, position - this.__offsetPosition, speed);

      if (speed > 0 && position < this.__endPosition || speed < 0 && position >= this.__startPosition) return position;

      return Infinity * speed;
    }
  }, {
    key: 'syncSpeed',
    value: function syncSpeed(time, position, speed) {
      if (this.__engine.syncSpeed) this.__engine.syncSpeed(time, position, speed);
    }
  }, {
    key: 'resetEnginePosition',
    value: function resetEnginePosition(engine) {
      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (position !== undefined) position += this.__offsetPosition;

      this.resetPosition(position);
    }
  }]);
  return TransportedTransported;
}(Transported);

// TransportedSpeedControlled
// has to start and stop the speed-controlled engines when the transport hits the engine's start and end position


var TransportedSpeedControlled = function (_Transported2) {
  (0, _inherits3.default)(TransportedSpeedControlled, _Transported2);

  function TransportedSpeedControlled(transport, engine, startPosition, endPosition, offsetPosition) {
    (0, _classCallCheck3.default)(this, TransportedSpeedControlled);
    return (0, _possibleConstructorReturn3.default)(this, (TransportedSpeedControlled.__proto__ || (0, _getPrototypeOf2.default)(TransportedSpeedControlled)).call(this, transport, engine, startPosition, endPosition, offsetPosition));
  }

  (0, _createClass3.default)(TransportedSpeedControlled, [{
    key: 'start',
    value: function start(time, position, speed) {
      this.__engine.syncSpeed(time, position, speed, true);
    }
  }, {
    key: 'stop',
    value: function stop(time, position) {
      this.__engine.syncSpeed(time, position, 0);
    }
  }, {
    key: 'syncSpeed',
    value: function syncSpeed(time, position, speed) {
      if (this.__isRunning) this.__engine.syncSpeed(time, position, speed);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.__engine.syncSpeed(this.master.currentTime, this.master.currentPosition - this.__offsetPosition, 0);
      (0, _get3.default)(TransportedSpeedControlled.prototype.__proto__ || (0, _getPrototypeOf2.default)(TransportedSpeedControlled.prototype), 'destroy', this).call(this);
    }
  }]);
  return TransportedSpeedControlled;
}(Transported);

// TransportedScheduled
// has to switch on and off the scheduled engines when the transport hits the engine's start and end position


var TransportedScheduled = function (_Transported3) {
  (0, _inherits3.default)(TransportedScheduled, _Transported3);

  function TransportedScheduled(transport, engine, startPosition, endPosition, offsetPosition) {
    (0, _classCallCheck3.default)(this, TransportedScheduled);

    // scheduling queue becomes master of engine
    var _this4 = (0, _possibleConstructorReturn3.default)(this, (TransportedScheduled.__proto__ || (0, _getPrototypeOf2.default)(TransportedScheduled)).call(this, transport, engine, startPosition, endPosition, offsetPosition));

    engine.master = null;
    transport.__schedulingQueue.add(engine, Infinity);
    return _this4;
  }

  (0, _createClass3.default)(TransportedScheduled, [{
    key: 'start',
    value: function start(time, position, speed) {
      this.master.__schedulingQueue.resetEngineTime(this.__engine, time);
    }
  }, {
    key: 'stop',
    value: function stop(time, position) {
      this.master.__schedulingQueue.resetEngineTime(this.__engine, Infinity);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.master.__schedulingQueue.remove(this.__engine);
      (0, _get3.default)(TransportedScheduled.prototype.__proto__ || (0, _getPrototypeOf2.default)(TransportedScheduled.prototype), 'destroy', this).call(this);
    }
  }]);
  return TransportedScheduled;
}(Transported);

// translates advancePosition of *transported* engines into global scheduler times


var TransportSchedulerHook = function (_TimeEngine2) {
  (0, _inherits3.default)(TransportSchedulerHook, _TimeEngine2);

  function TransportSchedulerHook(transport) {
    (0, _classCallCheck3.default)(this, TransportSchedulerHook);

    var _this5 = (0, _possibleConstructorReturn3.default)(this, (TransportSchedulerHook.__proto__ || (0, _getPrototypeOf2.default)(TransportSchedulerHook)).call(this));

    _this5.__transport = transport;

    _this5.__nextPosition = Infinity;
    _this5.__nextTime = Infinity;
    transport.__scheduler.add(_this5, Infinity);
    return _this5;
  }

  // TimeEngine method (scheduled interface)


  (0, _createClass3.default)(TransportSchedulerHook, [{
    key: 'advanceTime',
    value: function advanceTime(time) {
      var transport = this.__transport;
      var position = this.__nextPosition;
      var speed = transport.__speed;
      var nextPosition = transport.advancePosition(time, position, speed);
      var nextTime = transport.__getTimeAtPosition(nextPosition);

      this.__nextPosition = nextPosition;
      this.__nextTime = nextTime;

      return nextTime;
    }
  }, {
    key: 'resetPosition',
    value: function resetPosition() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__nextPosition;

      var transport = this.__transport;
      var time = transport.__getTimeAtPosition(position);

      this.__nextPosition = position;
      this.__nextTime = time;

      this.resetTime(time);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.__transport.__scheduler.remove(this);
      this.__transport = null;
    }
  }]);
  return TransportSchedulerHook;
}(_TimeEngine5.default);

// internal scheduling queue that returns the current position (and time) of the transport


var TransportSchedulingQueue = function (_SchedulingQueue) {
  (0, _inherits3.default)(TransportSchedulingQueue, _SchedulingQueue);

  function TransportSchedulingQueue(transport) {
    (0, _classCallCheck3.default)(this, TransportSchedulingQueue);

    var _this6 = (0, _possibleConstructorReturn3.default)(this, (TransportSchedulingQueue.__proto__ || (0, _getPrototypeOf2.default)(TransportSchedulingQueue)).call(this));

    _this6.__transport = transport;
    transport.__scheduler.add(_this6, Infinity);
    return _this6;
  }

  (0, _createClass3.default)(TransportSchedulingQueue, [{
    key: 'destroy',
    value: function destroy() {
      this.__transport.__scheduler.remove(this);
      this.__transport = null;
    }
  }, {
    key: 'currentTime',
    get: function get() {
      return this.__transport.currentTime;
    }
  }, {
    key: 'audioTime',
    get: function get() {
      return this.__transport.audioTime;
    }
  }, {
    key: 'currentPosition',
    get: function get() {
      return this.__transport.currentPosition;
    }
  }]);
  return TransportSchedulingQueue;
}(_SchedulingQueue3.default);

/**
 * Provides position-based scheduling of TimeEngine instances.
 *
 * [example]{@link https://rawgit.com/wavesjs/waves-masters/master/examples/transport/index.html}
 *
 *
 * @param {Object} scheduler - instance of Scheduler
 *
 * @example
 * import * as masters from 'waves-masters';
 *
 * const getTimeFunction = () => {
 *   const now = process.hrtime();
 *   return now[0] + now[1] * 1e-9;
 * }
 * const scheduler = new masters.Scheduler(getTimeFunction);
 * const transport = new masters.Transport(scheduler);
 * const playControl = new masters.PlayControl(scheduler, transport);
 * const myEngine = new MyEngine();
 * const yourEngine = new yourEngine();
 *
 * transport.add(myEngine);
 * transport.add(yourEngine);
 *
 * playControl.start();
 */


var Transport = function (_TimeEngine3) {
  (0, _inherits3.default)(Transport, _TimeEngine3);

  function Transport(scheduler) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Transport);

    var _this7 = (0, _possibleConstructorReturn3.default)(this, (Transport.__proto__ || (0, _getPrototypeOf2.default)(Transport)).call(this));

    if (!scheduler) throw new Error('Invalid argument `scheduler`, should be an instance of `Scheduler`');

    _this7.__engines = [];
    _this7.__transported = [];

    _this7.__scheduler = scheduler;
    _this7.__schedulerHook = new TransportSchedulerHook(_this7);
    _this7.__transportedQueue = new _PriorityQueue2.default();
    _this7.__schedulingQueue = new TransportSchedulingQueue(_this7);

    // syncronized time, position, and speed
    _this7.__time = 0;
    _this7.__position = 0;
    _this7.__speed = 0;
    return _this7;
  }

  (0, _createClass3.default)(Transport, [{
    key: '__getTimeAtPosition',
    value: function __getTimeAtPosition(position) {
      if (this.__speed === 0) return +Infinity;else return this.__time + (position - this.__position) / this.__speed;
    }
  }, {
    key: '__getPositionAtTime',
    value: function __getPositionAtTime(time) {
      return this.__position + (time - this.__time) * this.__speed;
    }
  }, {
    key: '__syncTransportedPosition',
    value: function __syncTransportedPosition(time, position, speed) {
      var numTransportedEngines = this.__transported.length;
      var nextPosition = Infinity * speed;

      if (numTransportedEngines > 0) {
        this.__transportedQueue.clear();
        this.__transportedQueue.reverse = speed < 0;

        for (var i = 0; i < numTransportedEngines; i++) {
          var engine = this.__transported[i];
          var nextEnginePosition = engine.syncPosition(time, position, speed);
          this.__transportedQueue.insert(engine, nextEnginePosition);
        }

        nextPosition = this.__transportedQueue.time;
      }

      return nextPosition;
    }
  }, {
    key: '__syncTransportedSpeed',
    value: function __syncTransportedSpeed(time, position, speed) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(this.__transported), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var transported = _step.value;

          transported.syncSpeed(time, position, speed);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /**
     * Get current master time.
     *
     * @type {Number}
     * @name currentTime
     * @memberof Transport
     * @instance
     * @readonly
     */

  }, {
    key: 'resetPosition',


    /**
     * Reset next transport position
     *
     * @param {Number} next - transport position
     */
    value: function resetPosition(position) {
      var master = this.master;

      if (master && master.resetEnginePosition !== undefined) master.resetEnginePosition(this, position);else this.__schedulerHook.resetPosition(position);
    }

    /**
     * Implementation of the transported time engine interface.
     *
     * @param {Number} time
     * @param {Number} position
     * @param {Number} speed
     */

  }, {
    key: 'syncPosition',
    value: function syncPosition(time, position, speed) {
      this.__time = time;
      this.__position = position;
      this.__speed = speed;

      return this.__syncTransportedPosition(time, position, speed);
    }

    /**
     * Implementation of the transported time engine interface.
     *
     * @param {Number} time
     * @param {Number} position
     * @param {Number} speed
     */

  }, {
    key: 'advancePosition',
    value: function advancePosition(time, position, speed) {
      var engine = this.__transportedQueue.head;
      var nextEnginePosition = engine.advancePosition(time, position, speed);
      return this.__transportedQueue.move(engine, nextEnginePosition);
    }

    /**
     * Implementation of the transported time engine interface.
     *
     * @param {Number} time
     * @param {Number} position
     * @param {Number} speed
     * @param {Boolean} [seek=false]
     */

  }, {
    key: 'syncSpeed',
    value: function syncSpeed(time, position, speed) {
      var seek = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var lastSpeed = this.__speed;

      this.__time = time;
      this.__position = position;
      this.__speed = speed;

      if (speed !== lastSpeed || seek) {
        var nextPosition = void 0;

        // resync transported engines
        if (seek || speed * lastSpeed < 0) {
          // seek or reverse direction
          nextPosition = this.__syncTransportedPosition(time, position, speed);
        } else if (lastSpeed === 0) {
          // start
          nextPosition = this.__syncTransportedPosition(time, position, speed);
        } else if (speed === 0) {
          // stop
          nextPosition = Infinity;
          this.__syncTransportedPosition(time, position, speed);
        } else {
          // change speed without reversing direction
          this.__syncTransportedSpeed(time, position, speed);
        }

        this.resetPosition(nextPosition);
      }
    }

    /**
     * Add a time engine to the transport.
     *
     * @param {Object} engine - engine to be added to the transport
     * @param {Number} position - start position
     */

  }, {
    key: 'add',
    value: function add(engine) {
      var startPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var endPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
      var offsetPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var transported = null;

      if (offsetPosition === -Infinity) offsetPosition = 0;

      if (engine.master) throw new Error("object has already been added to a master");

      if (_TimeEngine5.default.implementsTransported(engine)) transported = new TransportedTransported(this, engine, startPosition, endPosition, offsetPosition);else if (_TimeEngine5.default.implementsSpeedControlled(engine)) transported = new TransportedSpeedControlled(this, engine, startPosition, endPosition, offsetPosition);else if (_TimeEngine5.default.implementsScheduled(engine)) transported = new TransportedScheduled(this, engine, startPosition, endPosition, offsetPosition);else throw new Error("object cannot be added to a transport");

      if (transported) {
        var speed = this.__speed;

        addDuplet(this.__engines, this.__transported, engine, transported);

        if (speed !== 0) {
          // sync and start
          var nextEnginePosition = transported.syncPosition(this.currentTime, this.currentPosition, speed);
          var nextPosition = this.__transportedQueue.insert(transported, nextEnginePosition);

          this.resetPosition(nextPosition);
        }
      }

      return transported;
    }

    /**
     * Remove a time engine from the transport.
     *
     * @param {object} engineOrTransported - engine or transported to be removed from the transport
     */

  }, {
    key: 'remove',
    value: function remove(engineOrTransported) {
      var engine = engineOrTransported;
      var transported = removeDuplet(this.__engines, this.__transported, engineOrTransported);

      if (!transported) {
        engine = removeDuplet(this.__transported, this.__engines, engineOrTransported);
        transported = engineOrTransported;
      }

      if (engine && transported) {
        var nextPosition = this.__transportedQueue.remove(transported);

        transported.destroy();

        if (this.__speed !== 0) this.resetPosition(nextPosition);
      } else {
        throw new Error("object has not been added to this transport");
      }
    }

    /**
     * Reset position of the given engine.
     *
     * @param {TimeEngine} transported - Engine to reset
     * @param {Number} position - New position
     */

  }, {
    key: 'resetEnginePosition',
    value: function resetEnginePosition(transported) {
      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var speed = this.__speed;

      if (speed !== 0) {
        if (position === undefined) position = transported.syncPosition(this.currentTime, this.currentPosition, speed);

        var nextPosition = null;

        // the priority queue does not keep track of the elements that are
        // inserted at Infinity, so we need to reinsert transported engine in
        // this case.
        // @note - this could probably be more clean
        //       - probably the priority queue should keep these references
        if (!this.__transportedQueue.has(transported)) {
          nextPosition = this.__transportedQueue.insert(transported, position);
        } else {
          nextPosition = this.__transportedQueue.move(transported, position);
        }

        this.resetPosition(nextPosition);
      }
    }

    /**
     * Remove all time engines from the transport.
     */

  }, {
    key: 'clear',
    value: function clear() {
      this.syncSpeed(this.currentTime, this.currentPosition, 0);

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)(this.__transported), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var transported = _step2.value;

          transported.destroy();
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'currentTime',
    get: function get() {
      return this.__scheduler.currentTime;
    }

    /**
     * Get master audio time.
     *
     * @type {Number}
     * @name currentTime
     * @memberof Transport
     * @instance
     * @readonly
     */

  }, {
    key: 'audioTime',
    get: function get() {
      return this.__scheduler.audioTime;
    }

    /**
     * Get current master position. This getter will be replaced when the transport
     * is added to a master (i.e. transport or play-control).
     *
     * @type {Number}
     * @name currentPosition
     * @memberof Transport
     * @instance
     * @readonly
     */

  }, {
    key: 'currentPosition',
    get: function get() {
      var master = this.master;

      if (master && master.currentPosition !== undefined) return master.currentPosition;

      return this.__position + (this.__scheduler.currentTime - this.__time) * this.__speed;
    }
  }]);
  return Transport;
}(_TimeEngine5.default);

exports.default = Transport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zcG9ydC5qcyJdLCJuYW1lcyI6WyJhZGREdXBsZXQiLCJmaXJzdEFycmF5Iiwic2Vjb25kQXJyYXkiLCJmaXJzdEVsZW1lbnQiLCJzZWNvbmRFbGVtZW50IiwicHVzaCIsInJlbW92ZUR1cGxldCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlRyYW5zcG9ydGVkIiwidHJhbnNwb3J0IiwiZW5naW5lIiwic3RhcnQiLCJkdXJhdGlvbiIsIm9mZnNldCIsInN0cmV0Y2giLCJtYXN0ZXIiLCJfX2VuZ2luZSIsIl9fc3RhcnRQb3NpdGlvbiIsIl9fZW5kUG9zaXRpb24iLCJpc0Zpbml0ZSIsIkluZmluaXR5IiwiX19vZmZzZXRQb3NpdGlvbiIsIl9fc3RyZXRjaFBvc2l0aW9uIiwiX19pc1J1bm5pbmciLCJyZXNldFBvc2l0aW9uIiwidGltZSIsInBvc2l0aW9uIiwic3BlZWQiLCJ1bmRlZmluZWQiLCJyZXNldEVuZ2luZVBvc2l0aW9uIiwic3RvcCIsImN1cnJlbnRUaW1lIiwiYXVkaW9UaW1lIiwiY3VycmVudFBvc2l0aW9uIiwiVGltZUVuZ2luZSIsIlRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQiLCJzdGFydFBvc2l0aW9uIiwiZW5kUG9zaXRpb24iLCJvZmZzZXRQb3NpdGlvbiIsIk1hdGgiLCJtYXgiLCJtaW4iLCJzeW5jUG9zaXRpb24iLCJhZHZhbmNlUG9zaXRpb24iLCJzeW5jU3BlZWQiLCJUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZCIsIlRyYW5zcG9ydGVkU2NoZWR1bGVkIiwiX19zY2hlZHVsaW5nUXVldWUiLCJhZGQiLCJyZXNldEVuZ2luZVRpbWUiLCJyZW1vdmUiLCJUcmFuc3BvcnRTY2hlZHVsZXJIb29rIiwiX190cmFuc3BvcnQiLCJfX25leHRQb3NpdGlvbiIsIl9fbmV4dFRpbWUiLCJfX3NjaGVkdWxlciIsIl9fc3BlZWQiLCJuZXh0UG9zaXRpb24iLCJuZXh0VGltZSIsIl9fZ2V0VGltZUF0UG9zaXRpb24iLCJyZXNldFRpbWUiLCJUcmFuc3BvcnRTY2hlZHVsaW5nUXVldWUiLCJTY2hlZHVsaW5nUXVldWUiLCJUcmFuc3BvcnQiLCJzY2hlZHVsZXIiLCJvcHRpb25zIiwiRXJyb3IiLCJfX2VuZ2luZXMiLCJfX3RyYW5zcG9ydGVkIiwiX19zY2hlZHVsZXJIb29rIiwiX190cmFuc3BvcnRlZFF1ZXVlIiwiUHJpb3JpdHlRdWV1ZSIsIl9fdGltZSIsIl9fcG9zaXRpb24iLCJudW1UcmFuc3BvcnRlZEVuZ2luZXMiLCJsZW5ndGgiLCJjbGVhciIsInJldmVyc2UiLCJpIiwibmV4dEVuZ2luZVBvc2l0aW9uIiwiaW5zZXJ0IiwidHJhbnNwb3J0ZWQiLCJfX3N5bmNUcmFuc3BvcnRlZFBvc2l0aW9uIiwiaGVhZCIsIm1vdmUiLCJzZWVrIiwibGFzdFNwZWVkIiwiX19zeW5jVHJhbnNwb3J0ZWRTcGVlZCIsImltcGxlbWVudHNUcmFuc3BvcnRlZCIsImltcGxlbWVudHNTcGVlZENvbnRyb2xsZWQiLCJpbXBsZW1lbnRzU2NoZWR1bGVkIiwiZW5naW5lT3JUcmFuc3BvcnRlZCIsImRlc3Ryb3kiLCJoYXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdBLFNBQVNBLFNBQVQsQ0FBbUJDLFVBQW5CLEVBQStCQyxXQUEvQixFQUE0Q0MsWUFBNUMsRUFBMERDLGFBQTFELEVBQXlFO0FBQ3ZFSCxhQUFXSSxJQUFYLENBQWdCRixZQUFoQjtBQUNBRCxjQUFZRyxJQUFaLENBQWlCRCxhQUFqQjtBQUNEOztBQUVELFNBQVNFLFlBQVQsQ0FBc0JMLFVBQXRCLEVBQWtDQyxXQUFsQyxFQUErQ0MsWUFBL0MsRUFBNkQ7QUFDM0QsTUFBTUksUUFBUU4sV0FBV08sT0FBWCxDQUFtQkwsWUFBbkIsQ0FBZDs7QUFFQSxNQUFJSSxTQUFTLENBQWIsRUFBZ0I7QUFDZCxRQUFNSCxnQkFBZ0JGLFlBQVlLLEtBQVosQ0FBdEI7O0FBRUFOLGVBQVdRLE1BQVgsQ0FBa0JGLEtBQWxCLEVBQXlCLENBQXpCO0FBQ0FMLGdCQUFZTyxNQUFaLENBQW1CRixLQUFuQixFQUEwQixDQUExQjs7QUFFQSxXQUFPSCxhQUFQO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0lBQ01NLFc7OztBQUNKLHVCQUFZQyxTQUFaLEVBQXVCQyxNQUF2QixFQUErQkMsS0FBL0IsRUFBc0NDLFFBQXRDLEVBQWdEQyxNQUFoRCxFQUFxRTtBQUFBLFFBQWJDLE9BQWEsdUVBQUgsQ0FBRztBQUFBOztBQUFBOztBQUVuRSxVQUFLQyxNQUFMLEdBQWNOLFNBQWQ7O0FBRUEsVUFBS08sUUFBTCxHQUFnQk4sTUFBaEI7QUFDQUEsV0FBT0ssTUFBUDs7QUFFQSxVQUFLRSxlQUFMLEdBQXVCTixLQUF2QjtBQUNBLFVBQUtPLGFBQUwsR0FBcUIsQ0FBQ0MsU0FBU1AsUUFBVCxDQUFELEdBQXNCUSxRQUF0QixHQUFpQ1QsUUFBUUMsUUFBOUQ7QUFDQSxVQUFLUyxnQkFBTCxHQUF3QlYsUUFBUUUsTUFBaEM7QUFDQSxVQUFLUyxpQkFBTCxHQUF5QlIsT0FBekI7QUFDQSxVQUFLUyxXQUFMLEdBQW1CLEtBQW5CO0FBWG1FO0FBWXBFOzs7O2tDQUVhWixLLEVBQU9DLFEsRUFBbUM7QUFBQSxVQUF6QkMsTUFBeUIsdUVBQWhCLENBQWdCO0FBQUEsVUFBYkMsT0FBYSx1RUFBSCxDQUFHOztBQUN0RCxXQUFLRyxlQUFMLEdBQXVCTixLQUF2QjtBQUNBLFdBQUtPLGFBQUwsR0FBcUJQLFFBQVFDLFFBQTdCO0FBQ0EsV0FBS1MsZ0JBQUwsR0FBd0JWLFFBQVFFLE1BQWhDO0FBQ0EsV0FBS1MsaUJBQUwsR0FBeUJSLE9BQXpCO0FBQ0EsV0FBS1UsYUFBTDtBQUNEOzs7MEJBRUtDLEksRUFBTUMsUSxFQUFVQyxLLEVBQU8sQ0FBRTs7O3lCQUMxQkYsSSxFQUFNQyxRLEVBQVUsQ0FBRTs7O2tDQWNUQSxRLEVBQVU7QUFDdEIsVUFBSUEsYUFBYUUsU0FBakIsRUFDRUYsWUFBWSxLQUFLTCxnQkFBakI7O0FBRUYsV0FBS04sTUFBTCxDQUFZYyxtQkFBWixDQUFnQyxJQUFoQyxFQUFzQ0gsUUFBdEM7QUFDRDs7O2lDQUVZRCxJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQ2xDLFVBQUlBLFFBQVEsQ0FBWixFQUFlO0FBQ2IsWUFBSUQsV0FBVyxLQUFLVCxlQUFwQixFQUFxQzs7QUFFbkMsY0FBSSxLQUFLTSxXQUFULEVBQ0UsS0FBS08sSUFBTCxDQUFVTCxJQUFWLEVBQWdCQyxXQUFXLEtBQUtMLGdCQUFoQzs7QUFFRixlQUFLRSxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsaUJBQU8sS0FBS04sZUFBWjtBQUNELFNBUEQsTUFPTyxJQUFJUyxXQUFXLEtBQUtSLGFBQXBCLEVBQW1DO0FBQ3hDLGVBQUtQLEtBQUwsQ0FBV2MsSUFBWCxFQUFpQkMsV0FBVyxLQUFLTCxnQkFBakMsRUFBbURNLEtBQW5EOztBQUVBLGVBQUtKLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxpQkFBTyxLQUFLTCxhQUFaO0FBQ0Q7QUFDRixPQWRELE1BY087QUFDTCxZQUFJUSxXQUFXLEtBQUtSLGFBQXBCLEVBQW1DO0FBQ2pDLGNBQUksS0FBS0ssV0FBVCxFQUFzQjtBQUNwQixpQkFBS08sSUFBTCxDQUFVTCxJQUFWLEVBQWdCQyxXQUFXLEtBQUtMLGdCQUFoQzs7QUFFRixlQUFLRSxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsaUJBQU8sS0FBS0wsYUFBWjtBQUNELFNBTkQsTUFNTyxJQUFJUSxXQUFXLEtBQUtULGVBQXBCLEVBQXFDO0FBQzFDLGVBQUtOLEtBQUwsQ0FBV2MsSUFBWCxFQUFpQkMsV0FBVyxLQUFLTCxnQkFBakMsRUFBbURNLEtBQW5EOztBQUVBLGVBQUtKLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxpQkFBTyxLQUFLTixlQUFaO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJLEtBQUtNLFdBQVQsRUFBc0I7QUFDcEIsYUFBS08sSUFBTCxDQUFVTCxJQUFWLEVBQWdCQyxRQUFoQjs7QUFFRixXQUFLSCxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsYUFBT0gsV0FBV08sS0FBbEI7QUFDRDs7O29DQUVlRixJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQ3JDLFVBQUksQ0FBQyxLQUFLSixXQUFWLEVBQXVCO0FBQ3JCLGFBQUtaLEtBQUwsQ0FBV2MsSUFBWCxFQUFpQkMsV0FBVyxLQUFLTCxnQkFBakMsRUFBbURNLEtBQW5EO0FBQ0EsYUFBS0osV0FBTCxHQUFtQixJQUFuQjs7QUFFQSxZQUFJSSxRQUFRLENBQVosRUFDRSxPQUFPLEtBQUtULGFBQVo7O0FBRUYsZUFBTyxLQUFLRCxlQUFaO0FBQ0Q7O0FBRUQ7QUFDQSxXQUFLYSxJQUFMLENBQVVMLElBQVYsRUFBZ0JDLFdBQVcsS0FBS0wsZ0JBQWhDOztBQUVBLFdBQUtFLFdBQUwsR0FBbUIsS0FBbkI7QUFDQSxhQUFPSCxXQUFXTyxLQUFsQjtBQUNEOzs7OEJBRVNGLEksRUFBTUMsUSxFQUFVQyxLLEVBQU87QUFDL0IsVUFBSUEsVUFBVSxDQUFkLEVBQWlCO0FBQ2YsYUFBS0csSUFBTCxDQUFVTCxJQUFWLEVBQWdCQyxXQUFXLEtBQUtMLGdCQUFoQztBQUNIOzs7OEJBRVM7QUFDUixXQUFLTixNQUFMLEdBQWMsSUFBZDs7QUFFQSxXQUFLQyxRQUFMLENBQWNELE1BQWQsR0FBdUIsSUFBdkI7QUFDQSxXQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0Q7Ozt3QkFwRmlCO0FBQ2hCLGFBQU8sS0FBS0QsTUFBTCxDQUFZZ0IsV0FBbkI7QUFDRDs7O3dCQUVlO0FBQ2QsYUFBTyxLQUFLaEIsTUFBTCxDQUFZaUIsU0FBbkI7QUFDRDs7O3dCQUVxQjtBQUNwQixhQUFPLEtBQUtqQixNQUFMLENBQVlrQixlQUFaLEdBQThCLEtBQUtaLGdCQUExQztBQUNEOzs7RUFwQ3VCYSxvQjs7QUFpSDFCO0FBQ0E7OztJQUNNQyxzQjs7O0FBQ0osa0NBQVkxQixTQUFaLEVBQXVCQyxNQUF2QixFQUErQjBCLGFBQS9CLEVBQThDQyxXQUE5QyxFQUEyREMsY0FBM0QsRUFBMkU7QUFBQTtBQUFBLGlLQUNuRTdCLFNBRG1FLEVBQ3hEQyxNQUR3RCxFQUNoRDBCLGFBRGdELEVBQ2pDQyxXQURpQyxFQUNwQkMsY0FEb0I7QUFFMUU7Ozs7aUNBRVliLEksRUFBTUMsUSxFQUFVQyxLLEVBQU87QUFDbEMsVUFBSUEsUUFBUSxDQUFSLElBQWFELFdBQVcsS0FBS1IsYUFBakMsRUFDRVEsV0FBV2EsS0FBS0MsR0FBTCxDQUFTZCxRQUFULEVBQW1CLEtBQUtULGVBQXhCLENBQVgsQ0FERixLQUVLLElBQUlVLFFBQVEsQ0FBUixJQUFhRCxZQUFZLEtBQUtULGVBQWxDLEVBQ0hTLFdBQVdhLEtBQUtFLEdBQUwsQ0FBU2YsUUFBVCxFQUFtQixLQUFLUixhQUF4QixDQUFYOztBQUVGLGFBQU8sS0FBS0csZ0JBQUwsR0FBd0IsS0FBS0wsUUFBTCxDQUFjMEIsWUFBZCxDQUEyQmpCLElBQTNCLEVBQWlDQyxXQUFXLEtBQUtMLGdCQUFqRCxFQUFtRU0sS0FBbkUsQ0FBL0I7QUFDRDs7O29DQUVlRixJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQ3JDRCxpQkFBVyxLQUFLTCxnQkFBTCxHQUF3QixLQUFLTCxRQUFMLENBQWMyQixlQUFkLENBQThCbEIsSUFBOUIsRUFBb0NDLFdBQVcsS0FBS0wsZ0JBQXBELEVBQXNFTSxLQUF0RSxDQUFuQzs7QUFFQSxVQUFJQSxRQUFRLENBQVIsSUFBYUQsV0FBVyxLQUFLUixhQUE3QixJQUE4Q1MsUUFBUSxDQUFSLElBQWFELFlBQVksS0FBS1QsZUFBaEYsRUFDRSxPQUFPUyxRQUFQOztBQUVGLGFBQU9OLFdBQVdPLEtBQWxCO0FBQ0Q7Ozs4QkFFU0YsSSxFQUFNQyxRLEVBQVVDLEssRUFBTztBQUMvQixVQUFJLEtBQUtYLFFBQUwsQ0FBYzRCLFNBQWxCLEVBQ0UsS0FBSzVCLFFBQUwsQ0FBYzRCLFNBQWQsQ0FBd0JuQixJQUF4QixFQUE4QkMsUUFBOUIsRUFBd0NDLEtBQXhDO0FBQ0g7Ozt3Q0FFbUJqQixNLEVBQThCO0FBQUEsVUFBdEJnQixRQUFzQix1RUFBWEUsU0FBVzs7QUFDaEQsVUFBSUYsYUFBYUUsU0FBakIsRUFDRUYsWUFBWSxLQUFLTCxnQkFBakI7O0FBRUYsV0FBS0csYUFBTCxDQUFtQkUsUUFBbkI7QUFDRDs7O0VBakNrQ2xCLFc7O0FBb0NyQztBQUNBOzs7SUFDTXFDLDBCOzs7QUFDSixzQ0FBWXBDLFNBQVosRUFBdUJDLE1BQXZCLEVBQStCMEIsYUFBL0IsRUFBOENDLFdBQTlDLEVBQTJEQyxjQUEzRCxFQUEyRTtBQUFBO0FBQUEseUtBQ25FN0IsU0FEbUUsRUFDeERDLE1BRHdELEVBQ2hEMEIsYUFEZ0QsRUFDakNDLFdBRGlDLEVBQ3BCQyxjQURvQjtBQUUxRTs7OzswQkFFS2IsSSxFQUFNQyxRLEVBQVVDLEssRUFBTztBQUMzQixXQUFLWCxRQUFMLENBQWM0QixTQUFkLENBQXdCbkIsSUFBeEIsRUFBOEJDLFFBQTlCLEVBQXdDQyxLQUF4QyxFQUErQyxJQUEvQztBQUNEOzs7eUJBRUlGLEksRUFBTUMsUSxFQUFVO0FBQ25CLFdBQUtWLFFBQUwsQ0FBYzRCLFNBQWQsQ0FBd0JuQixJQUF4QixFQUE4QkMsUUFBOUIsRUFBd0MsQ0FBeEM7QUFDRDs7OzhCQUVTRCxJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQy9CLFVBQUksS0FBS0osV0FBVCxFQUNFLEtBQUtQLFFBQUwsQ0FBYzRCLFNBQWQsQ0FBd0JuQixJQUF4QixFQUE4QkMsUUFBOUIsRUFBd0NDLEtBQXhDO0FBQ0g7Ozs4QkFFUztBQUNSLFdBQUtYLFFBQUwsQ0FBYzRCLFNBQWQsQ0FBd0IsS0FBSzdCLE1BQUwsQ0FBWWdCLFdBQXBDLEVBQWlELEtBQUtoQixNQUFMLENBQVlrQixlQUFaLEdBQThCLEtBQUtaLGdCQUFwRixFQUFzRyxDQUF0RztBQUNBO0FBQ0Q7OztFQXJCc0NiLFc7O0FBd0J6QztBQUNBOzs7SUFDTXNDLG9COzs7QUFDSixnQ0FBWXJDLFNBQVosRUFBdUJDLE1BQXZCLEVBQStCMEIsYUFBL0IsRUFBOENDLFdBQTlDLEVBQTJEQyxjQUEzRCxFQUEyRTtBQUFBOztBQUd6RTtBQUh5RSxtS0FDbkU3QixTQURtRSxFQUN4REMsTUFEd0QsRUFDaEQwQixhQURnRCxFQUNqQ0MsV0FEaUMsRUFDcEJDLGNBRG9COztBQUl6RTVCLFdBQU9LLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQU4sY0FBVXNDLGlCQUFWLENBQTRCQyxHQUE1QixDQUFnQ3RDLE1BQWhDLEVBQXdDVSxRQUF4QztBQUx5RTtBQU0xRTs7OzswQkFFS0ssSSxFQUFNQyxRLEVBQVVDLEssRUFBTztBQUMzQixXQUFLWixNQUFMLENBQVlnQyxpQkFBWixDQUE4QkUsZUFBOUIsQ0FBOEMsS0FBS2pDLFFBQW5ELEVBQTZEUyxJQUE3RDtBQUNEOzs7eUJBRUlBLEksRUFBTUMsUSxFQUFVO0FBQ25CLFdBQUtYLE1BQUwsQ0FBWWdDLGlCQUFaLENBQThCRSxlQUE5QixDQUE4QyxLQUFLakMsUUFBbkQsRUFBNkRJLFFBQTdEO0FBQ0Q7Ozs4QkFFUztBQUNSLFdBQUtMLE1BQUwsQ0FBWWdDLGlCQUFaLENBQThCRyxNQUE5QixDQUFxQyxLQUFLbEMsUUFBMUM7QUFDQTtBQUNEOzs7RUFwQmdDUixXOztBQXVCbkM7OztJQUNNMkMsc0I7OztBQUNKLGtDQUFZMUMsU0FBWixFQUF1QjtBQUFBOztBQUFBOztBQUdyQixXQUFLMkMsV0FBTCxHQUFtQjNDLFNBQW5COztBQUVBLFdBQUs0QyxjQUFMLEdBQXNCakMsUUFBdEI7QUFDQSxXQUFLa0MsVUFBTCxHQUFrQmxDLFFBQWxCO0FBQ0FYLGNBQVU4QyxXQUFWLENBQXNCUCxHQUF0QixTQUFnQzVCLFFBQWhDO0FBUHFCO0FBUXRCOztBQUVEOzs7OztnQ0FDWUssSSxFQUFNO0FBQ2hCLFVBQU1oQixZQUFZLEtBQUsyQyxXQUF2QjtBQUNBLFVBQU0xQixXQUFXLEtBQUsyQixjQUF0QjtBQUNBLFVBQU0xQixRQUFRbEIsVUFBVStDLE9BQXhCO0FBQ0EsVUFBTUMsZUFBZWhELFVBQVVrQyxlQUFWLENBQTBCbEIsSUFBMUIsRUFBZ0NDLFFBQWhDLEVBQTBDQyxLQUExQyxDQUFyQjtBQUNBLFVBQU0rQixXQUFXakQsVUFBVWtELG1CQUFWLENBQThCRixZQUE5QixDQUFqQjs7QUFFQSxXQUFLSixjQUFMLEdBQXNCSSxZQUF0QjtBQUNBLFdBQUtILFVBQUwsR0FBa0JJLFFBQWxCOztBQUVBLGFBQU9BLFFBQVA7QUFDRDs7O29DQUU2QztBQUFBLFVBQWhDaEMsUUFBZ0MsdUVBQXJCLEtBQUsyQixjQUFnQjs7QUFDNUMsVUFBTTVDLFlBQVksS0FBSzJDLFdBQXZCO0FBQ0EsVUFBTTNCLE9BQU9oQixVQUFVa0QsbUJBQVYsQ0FBOEJqQyxRQUE5QixDQUFiOztBQUVBLFdBQUsyQixjQUFMLEdBQXNCM0IsUUFBdEI7QUFDQSxXQUFLNEIsVUFBTCxHQUFrQjdCLElBQWxCOztBQUVBLFdBQUttQyxTQUFMLENBQWVuQyxJQUFmO0FBQ0Q7Ozs4QkFFUztBQUNSLFdBQUsyQixXQUFMLENBQWlCRyxXQUFqQixDQUE2QkwsTUFBN0IsQ0FBb0MsSUFBcEM7QUFDQSxXQUFLRSxXQUFMLEdBQW1CLElBQW5CO0FBQ0Q7OztFQXRDa0NsQixvQjs7QUF5Q3JDOzs7SUFDTTJCLHdCOzs7QUFDSixvQ0FBWXBELFNBQVosRUFBdUI7QUFBQTs7QUFBQTs7QUFHckIsV0FBSzJDLFdBQUwsR0FBbUIzQyxTQUFuQjtBQUNBQSxjQUFVOEMsV0FBVixDQUFzQlAsR0FBdEIsU0FBZ0M1QixRQUFoQztBQUpxQjtBQUt0Qjs7Ozs4QkFjUztBQUNSLFdBQUtnQyxXQUFMLENBQWlCRyxXQUFqQixDQUE2QkwsTUFBN0IsQ0FBb0MsSUFBcEM7QUFDQSxXQUFLRSxXQUFMLEdBQW1CLElBQW5CO0FBQ0Q7Ozt3QkFmaUI7QUFDaEIsYUFBTyxLQUFLQSxXQUFMLENBQWlCckIsV0FBeEI7QUFDRDs7O3dCQUVlO0FBQ2QsYUFBTyxLQUFLcUIsV0FBTCxDQUFpQnBCLFNBQXhCO0FBQ0Q7Ozt3QkFFcUI7QUFDcEIsYUFBTyxLQUFLb0IsV0FBTCxDQUFpQm5CLGVBQXhCO0FBQ0Q7OztFQWxCb0M2Qix5Qjs7QUEwQnZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBMEJNQyxTOzs7QUFDSixxQkFBWUMsU0FBWixFQUFxQztBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUFBOztBQUFBOztBQUduQyxRQUFJLENBQUNELFNBQUwsRUFDRSxNQUFNLElBQUlFLEtBQUosQ0FBVSxvRUFBVixDQUFOOztBQUVGLFdBQUtDLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxXQUFLQyxhQUFMLEdBQXFCLEVBQXJCOztBQUVBLFdBQUtiLFdBQUwsR0FBbUJTLFNBQW5CO0FBQ0EsV0FBS0ssZUFBTCxHQUF1QixJQUFJbEIsc0JBQUosUUFBdkI7QUFDQSxXQUFLbUIsa0JBQUwsR0FBMEIsSUFBSUMsdUJBQUosRUFBMUI7QUFDQSxXQUFLeEIsaUJBQUwsR0FBeUIsSUFBSWMsd0JBQUosUUFBekI7O0FBRUE7QUFDQSxXQUFLVyxNQUFMLEdBQWMsQ0FBZDtBQUNBLFdBQUtDLFVBQUwsR0FBa0IsQ0FBbEI7QUFDQSxXQUFLakIsT0FBTCxHQUFlLENBQWY7QUFqQm1DO0FBa0JwQzs7Ozt3Q0FFbUI5QixRLEVBQVU7QUFDNUIsVUFBSSxLQUFLOEIsT0FBTCxLQUFpQixDQUFyQixFQUNFLE9BQU8sQ0FBQ3BDLFFBQVIsQ0FERixLQUdFLE9BQU8sS0FBS29ELE1BQUwsR0FBYyxDQUFDOUMsV0FBVyxLQUFLK0MsVUFBakIsSUFBK0IsS0FBS2pCLE9BQXpEO0FBQ0g7Ozt3Q0FFbUIvQixJLEVBQU07QUFDeEIsYUFBTyxLQUFLZ0QsVUFBTCxHQUFrQixDQUFDaEQsT0FBTyxLQUFLK0MsTUFBYixJQUF1QixLQUFLaEIsT0FBckQ7QUFDRDs7OzhDQUV5Qi9CLEksRUFBTUMsUSxFQUFVQyxLLEVBQU87QUFDL0MsVUFBTStDLHdCQUF3QixLQUFLTixhQUFMLENBQW1CTyxNQUFqRDtBQUNBLFVBQUlsQixlQUFlckMsV0FBV08sS0FBOUI7O0FBRUEsVUFBSStDLHdCQUF3QixDQUE1QixFQUErQjtBQUM3QixhQUFLSixrQkFBTCxDQUF3Qk0sS0FBeEI7QUFDQSxhQUFLTixrQkFBTCxDQUF3Qk8sT0FBeEIsR0FBbUNsRCxRQUFRLENBQTNDOztBQUVBLGFBQUssSUFBSW1ELElBQUksQ0FBYixFQUFnQkEsSUFBSUoscUJBQXBCLEVBQTJDSSxHQUEzQyxFQUFnRDtBQUM5QyxjQUFNcEUsU0FBUyxLQUFLMEQsYUFBTCxDQUFtQlUsQ0FBbkIsQ0FBZjtBQUNBLGNBQU1DLHFCQUFxQnJFLE9BQU9nQyxZQUFQLENBQW9CakIsSUFBcEIsRUFBMEJDLFFBQTFCLEVBQW9DQyxLQUFwQyxDQUEzQjtBQUNBLGVBQUsyQyxrQkFBTCxDQUF3QlUsTUFBeEIsQ0FBK0J0RSxNQUEvQixFQUF1Q3FFLGtCQUF2QztBQUNEOztBQUVEdEIsdUJBQWUsS0FBS2Esa0JBQUwsQ0FBd0I3QyxJQUF2QztBQUNEOztBQUVELGFBQU9nQyxZQUFQO0FBQ0Q7OzsyQ0FFc0JoQyxJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQzVDLHdEQUF3QixLQUFLeUMsYUFBN0I7QUFBQSxjQUFTYSxXQUFUOztBQUNFQSxzQkFBWXJDLFNBQVosQ0FBc0JuQixJQUF0QixFQUE0QkMsUUFBNUIsRUFBc0NDLEtBQXRDO0FBREY7QUFENEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUc3Qzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7QUE2Q0E7Ozs7O2tDQUtjRCxRLEVBQVU7QUFDdEIsVUFBTVgsU0FBUyxLQUFLQSxNQUFwQjs7QUFFQSxVQUFJQSxVQUFVQSxPQUFPYyxtQkFBUCxLQUErQkQsU0FBN0MsRUFDRWIsT0FBT2MsbUJBQVAsQ0FBMkIsSUFBM0IsRUFBaUNILFFBQWpDLEVBREYsS0FHRSxLQUFLMkMsZUFBTCxDQUFxQjdDLGFBQXJCLENBQW1DRSxRQUFuQztBQUNIOztBQUVEOzs7Ozs7Ozs7O2lDQU9hRCxJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQ2xDLFdBQUs2QyxNQUFMLEdBQWMvQyxJQUFkO0FBQ0EsV0FBS2dELFVBQUwsR0FBa0IvQyxRQUFsQjtBQUNBLFdBQUs4QixPQUFMLEdBQWU3QixLQUFmOztBQUVBLGFBQU8sS0FBS3VELHlCQUFMLENBQStCekQsSUFBL0IsRUFBcUNDLFFBQXJDLEVBQStDQyxLQUEvQyxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7b0NBT2dCRixJLEVBQU1DLFEsRUFBVUMsSyxFQUFPO0FBQ3JDLFVBQU1qQixTQUFTLEtBQUs0RCxrQkFBTCxDQUF3QmEsSUFBdkM7QUFDQSxVQUFNSixxQkFBcUJyRSxPQUFPaUMsZUFBUCxDQUF1QmxCLElBQXZCLEVBQTZCQyxRQUE3QixFQUF1Q0MsS0FBdkMsQ0FBM0I7QUFDQSxhQUFPLEtBQUsyQyxrQkFBTCxDQUF3QmMsSUFBeEIsQ0FBNkIxRSxNQUE3QixFQUFxQ3FFLGtCQUFyQyxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7OzhCQVFVdEQsSSxFQUFNQyxRLEVBQVVDLEssRUFBcUI7QUFBQSxVQUFkMEQsSUFBYyx1RUFBUCxLQUFPOztBQUM3QyxVQUFNQyxZQUFZLEtBQUs5QixPQUF2Qjs7QUFFQSxXQUFLZ0IsTUFBTCxHQUFjL0MsSUFBZDtBQUNBLFdBQUtnRCxVQUFMLEdBQWtCL0MsUUFBbEI7QUFDQSxXQUFLOEIsT0FBTCxHQUFlN0IsS0FBZjs7QUFFQSxVQUFJQSxVQUFVMkQsU0FBVixJQUF1QkQsSUFBM0IsRUFBaUM7QUFDL0IsWUFBSTVCLHFCQUFKOztBQUVBO0FBQ0EsWUFBSTRCLFFBQVExRCxRQUFRMkQsU0FBUixHQUFvQixDQUFoQyxFQUFtQztBQUNqQztBQUNBN0IseUJBQWUsS0FBS3lCLHlCQUFMLENBQStCekQsSUFBL0IsRUFBcUNDLFFBQXJDLEVBQStDQyxLQUEvQyxDQUFmO0FBQ0QsU0FIRCxNQUdPLElBQUkyRCxjQUFjLENBQWxCLEVBQXFCO0FBQzFCO0FBQ0E3Qix5QkFBZSxLQUFLeUIseUJBQUwsQ0FBK0J6RCxJQUEvQixFQUFxQ0MsUUFBckMsRUFBK0NDLEtBQS9DLENBQWY7QUFDRCxTQUhNLE1BR0EsSUFBSUEsVUFBVSxDQUFkLEVBQWlCO0FBQ3RCO0FBQ0E4Qix5QkFBZXJDLFFBQWY7QUFDQSxlQUFLOEQseUJBQUwsQ0FBK0J6RCxJQUEvQixFQUFxQ0MsUUFBckMsRUFBK0NDLEtBQS9DO0FBQ0QsU0FKTSxNQUlBO0FBQ0w7QUFDQSxlQUFLNEQsc0JBQUwsQ0FBNEI5RCxJQUE1QixFQUFrQ0MsUUFBbEMsRUFBNENDLEtBQTVDO0FBQ0Q7O0FBRUQsYUFBS0gsYUFBTCxDQUFtQmlDLFlBQW5CO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7O3dCQU1JL0MsTSxFQUF1RTtBQUFBLFVBQS9EMEIsYUFBK0QsdUVBQS9DLENBQStDO0FBQUEsVUFBNUNDLFdBQTRDLHVFQUE5QmpCLFFBQThCO0FBQUEsVUFBcEJrQixjQUFvQix1RUFBSCxDQUFHOztBQUN6RSxVQUFJMkMsY0FBYyxJQUFsQjs7QUFFQSxVQUFJM0MsbUJBQW1CLENBQUNsQixRQUF4QixFQUNFa0IsaUJBQWlCLENBQWpCOztBQUVGLFVBQUk1QixPQUFPSyxNQUFYLEVBQ0UsTUFBTSxJQUFJbUQsS0FBSixDQUFVLDJDQUFWLENBQU47O0FBRUYsVUFBSWhDLHFCQUFXc0QscUJBQVgsQ0FBaUM5RSxNQUFqQyxDQUFKLEVBQ0V1RSxjQUFjLElBQUk5QyxzQkFBSixDQUEyQixJQUEzQixFQUFpQ3pCLE1BQWpDLEVBQXlDMEIsYUFBekMsRUFBd0RDLFdBQXhELEVBQXFFQyxjQUFyRSxDQUFkLENBREYsS0FFSyxJQUFJSixxQkFBV3VELHlCQUFYLENBQXFDL0UsTUFBckMsQ0FBSixFQUNIdUUsY0FBYyxJQUFJcEMsMEJBQUosQ0FBK0IsSUFBL0IsRUFBcUNuQyxNQUFyQyxFQUE2QzBCLGFBQTdDLEVBQTREQyxXQUE1RCxFQUF5RUMsY0FBekUsQ0FBZCxDQURHLEtBRUEsSUFBSUoscUJBQVd3RCxtQkFBWCxDQUErQmhGLE1BQS9CLENBQUosRUFDSHVFLGNBQWMsSUFBSW5DLG9CQUFKLENBQXlCLElBQXpCLEVBQStCcEMsTUFBL0IsRUFBdUMwQixhQUF2QyxFQUFzREMsV0FBdEQsRUFBbUVDLGNBQW5FLENBQWQsQ0FERyxLQUdILE1BQU0sSUFBSTRCLEtBQUosQ0FBVSx1Q0FBVixDQUFOOztBQUVGLFVBQUllLFdBQUosRUFBaUI7QUFDZixZQUFNdEQsUUFBUSxLQUFLNkIsT0FBbkI7O0FBRUExRCxrQkFBVSxLQUFLcUUsU0FBZixFQUEwQixLQUFLQyxhQUEvQixFQUE4QzFELE1BQTlDLEVBQXNEdUUsV0FBdEQ7O0FBRUEsWUFBSXRELFVBQVUsQ0FBZCxFQUFpQjtBQUNmO0FBQ0EsY0FBTW9ELHFCQUFxQkUsWUFBWXZDLFlBQVosQ0FBeUIsS0FBS1gsV0FBOUIsRUFBMkMsS0FBS0UsZUFBaEQsRUFBaUVOLEtBQWpFLENBQTNCO0FBQ0EsY0FBTThCLGVBQWUsS0FBS2Esa0JBQUwsQ0FBd0JVLE1BQXhCLENBQStCQyxXQUEvQixFQUE0Q0Ysa0JBQTVDLENBQXJCOztBQUVBLGVBQUt2RCxhQUFMLENBQW1CaUMsWUFBbkI7QUFDRDtBQUNGOztBQUVELGFBQU93QixXQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OzJCQUtPVSxtQixFQUFxQjtBQUMxQixVQUFJakYsU0FBU2lGLG1CQUFiO0FBQ0EsVUFBSVYsY0FBYzdFLGFBQWEsS0FBSytELFNBQWxCLEVBQTZCLEtBQUtDLGFBQWxDLEVBQWlEdUIsbUJBQWpELENBQWxCOztBQUVBLFVBQUksQ0FBQ1YsV0FBTCxFQUFrQjtBQUNoQnZFLGlCQUFTTixhQUFhLEtBQUtnRSxhQUFsQixFQUFpQyxLQUFLRCxTQUF0QyxFQUFpRHdCLG1CQUFqRCxDQUFUO0FBQ0FWLHNCQUFjVSxtQkFBZDtBQUNEOztBQUVELFVBQUlqRixVQUFVdUUsV0FBZCxFQUEyQjtBQUN6QixZQUFNeEIsZUFBZSxLQUFLYSxrQkFBTCxDQUF3QnBCLE1BQXhCLENBQStCK0IsV0FBL0IsQ0FBckI7O0FBRUFBLG9CQUFZVyxPQUFaOztBQUVBLFlBQUksS0FBS3BDLE9BQUwsS0FBaUIsQ0FBckIsRUFDRSxLQUFLaEMsYUFBTCxDQUFtQmlDLFlBQW5CO0FBQ0gsT0FQRCxNQU9PO0FBQ0wsY0FBTSxJQUFJUyxLQUFKLENBQVUsNkNBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7Ozt3Q0FNb0JlLFcsRUFBbUM7QUFBQSxVQUF0QnZELFFBQXNCLHVFQUFYRSxTQUFXOztBQUNyRCxVQUFNRCxRQUFRLEtBQUs2QixPQUFuQjs7QUFFQSxVQUFJN0IsVUFBVSxDQUFkLEVBQWlCO0FBQ2YsWUFBSUQsYUFBYUUsU0FBakIsRUFDRUYsV0FBV3VELFlBQVl2QyxZQUFaLENBQXlCLEtBQUtYLFdBQTlCLEVBQTJDLEtBQUtFLGVBQWhELEVBQWlFTixLQUFqRSxDQUFYOztBQUVGLFlBQUk4QixlQUFlLElBQW5COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFJLENBQUMsS0FBS2Esa0JBQUwsQ0FBd0J1QixHQUF4QixDQUE0QlosV0FBNUIsQ0FBTCxFQUErQztBQUM3Q3hCLHlCQUFlLEtBQUthLGtCQUFMLENBQXdCVSxNQUF4QixDQUErQkMsV0FBL0IsRUFBNEN2RCxRQUE1QyxDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0wrQix5QkFBZSxLQUFLYSxrQkFBTCxDQUF3QmMsSUFBeEIsQ0FBNkJILFdBQTdCLEVBQTBDdkQsUUFBMUMsQ0FBZjtBQUNEOztBQUVELGFBQUtGLGFBQUwsQ0FBbUJpQyxZQUFuQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs0QkFHUTtBQUNOLFdBQUtiLFNBQUwsQ0FBZSxLQUFLYixXQUFwQixFQUFpQyxLQUFLRSxlQUF0QyxFQUF1RCxDQUF2RDs7QUFETTtBQUFBO0FBQUE7O0FBQUE7QUFHTix5REFBd0IsS0FBS21DLGFBQTdCO0FBQUEsY0FBU2EsV0FBVDs7QUFDRUEsc0JBQVlXLE9BQVo7QUFERjtBQUhNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLUDs7O3dCQTdOaUI7QUFDaEIsYUFBTyxLQUFLckMsV0FBTCxDQUFpQnhCLFdBQXhCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozt3QkFTZ0I7QUFDZCxhQUFPLEtBQUt3QixXQUFMLENBQWlCdkIsU0FBeEI7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozt3QkFVc0I7QUFDcEIsVUFBTWpCLFNBQVMsS0FBS0EsTUFBcEI7O0FBRUEsVUFBSUEsVUFBVUEsT0FBT2tCLGVBQVAsS0FBMkJMLFNBQXpDLEVBQ0UsT0FBT2IsT0FBT2tCLGVBQWQ7O0FBRUYsYUFBTyxLQUFLd0MsVUFBTCxHQUFrQixDQUFDLEtBQUtsQixXQUFMLENBQWlCeEIsV0FBakIsR0FBK0IsS0FBS3lDLE1BQXJDLElBQStDLEtBQUtoQixPQUE3RTtBQUNEOzs7RUFwR3FCdEIsb0I7O2tCQWtTVDZCLFMiLCJmaWxlIjoiVHJhbnNwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByaW9yaXR5UXVldWUgZnJvbSAnLi4vY29yZS9Qcmlvcml0eVF1ZXVlJztcbmltcG9ydCBTY2hlZHVsaW5nUXVldWUgZnJvbSAnLi4vY29yZS9TY2hlZHVsaW5nUXVldWUnO1xuaW1wb3J0IFRpbWVFbmdpbmUgZnJvbSAnLi4vY29yZS9UaW1lRW5naW5lJztcblxuXG5mdW5jdGlvbiBhZGREdXBsZXQoZmlyc3RBcnJheSwgc2Vjb25kQXJyYXksIGZpcnN0RWxlbWVudCwgc2Vjb25kRWxlbWVudCkge1xuICBmaXJzdEFycmF5LnB1c2goZmlyc3RFbGVtZW50KTtcbiAgc2Vjb25kQXJyYXkucHVzaChzZWNvbmRFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRHVwbGV0KGZpcnN0QXJyYXksIHNlY29uZEFycmF5LCBmaXJzdEVsZW1lbnQpIHtcbiAgY29uc3QgaW5kZXggPSBmaXJzdEFycmF5LmluZGV4T2YoZmlyc3RFbGVtZW50KTtcblxuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGNvbnN0IHNlY29uZEVsZW1lbnQgPSBzZWNvbmRBcnJheVtpbmRleF07XG5cbiAgICBmaXJzdEFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgc2Vjb25kQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHJldHVybiBzZWNvbmRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFRoZSBUcmFuc3BvcnRlZCBjYWxsIGlzIHRoZSBiYXNlIGNsYXNzIG9mIHRoZSBhZGFwdGVycyBiZXR3ZWVuXG4vLyBkaWZmZXJlbnQgdHlwZXMgb2YgZW5naW5lcyAoaS5lLiB0cmFuc3BvcnRlZCwgc2NoZWR1bGVkLCBwbGF5LWNvbnRyb2xsZWQpXG4vLyBUaGUgYWRhcHRlcnMgYXJlIGF0IHRoZSBzYW1lIHRpbWUgbWFzdGVycyBmb3IgdGhlIGVuZ2luZXMgYWRkZWQgdG8gdGhlIHRyYW5zcG9ydFxuLy8gYW5kIHRyYW5zcG9ydGVkIFRpbWVFbmdpbmVzIGluc2VydGVkIGludG8gdGhlIHRyYW5zcG9ydCdzIHBvc2l0aW9uLWJhc2VkIHByaXRvcml0eSBxdWV1ZS5cbmNsYXNzIFRyYW5zcG9ydGVkIGV4dGVuZHMgVGltZUVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydCwgZHVyYXRpb24sIG9mZnNldCwgc3RyZXRjaCA9IDEpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWFzdGVyID0gdHJhbnNwb3J0O1xuXG4gICAgdGhpcy5fX2VuZ2luZSA9IGVuZ2luZTtcbiAgICBlbmdpbmUubWFzdGVyID0gdGhpcztcblxuICAgIHRoaXMuX19zdGFydFBvc2l0aW9uID0gc3RhcnQ7XG4gICAgdGhpcy5fX2VuZFBvc2l0aW9uID0gIWlzRmluaXRlKGR1cmF0aW9uKSA/IEluZmluaXR5IDogc3RhcnQgKyBkdXJhdGlvbjtcbiAgICB0aGlzLl9fb2Zmc2V0UG9zaXRpb24gPSBzdGFydCArIG9mZnNldDtcbiAgICB0aGlzLl9fc3RyZXRjaFBvc2l0aW9uID0gc3RyZXRjaDtcbiAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gIH1cblxuICBzZXRCb3VuZGFyaWVzKHN0YXJ0LCBkdXJhdGlvbiwgb2Zmc2V0ID0gMCwgc3RyZXRjaCA9IDEpIHtcbiAgICB0aGlzLl9fc3RhcnRQb3NpdGlvbiA9IHN0YXJ0O1xuICAgIHRoaXMuX19lbmRQb3NpdGlvbiA9IHN0YXJ0ICsgZHVyYXRpb247XG4gICAgdGhpcy5fX29mZnNldFBvc2l0aW9uID0gc3RhcnQgKyBvZmZzZXQ7XG4gICAgdGhpcy5fX3N0cmV0Y2hQb3NpdGlvbiA9IHN0cmV0Y2g7XG4gICAgdGhpcy5yZXNldFBvc2l0aW9uKCk7XG4gIH1cblxuICBzdGFydCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHt9XG4gIHN0b3AodGltZSwgcG9zaXRpb24pIHt9XG5cbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLm1hc3Rlci5jdXJyZW50VGltZTtcbiAgfVxuXG4gIGdldCBhdWRpb1RpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFzdGVyLmF1ZGlvVGltZTtcbiAgfVxuXG4gIGdldCBjdXJyZW50UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFzdGVyLmN1cnJlbnRQb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbjtcbiAgfVxuXG4gIHJlc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBpZiAocG9zaXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgIHBvc2l0aW9uICs9IHRoaXMuX19vZmZzZXRQb3NpdGlvbjtcblxuICAgIHRoaXMubWFzdGVyLnJlc2V0RW5naW5lUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICB9XG5cbiAgc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIGlmIChzcGVlZCA+IDApIHtcbiAgICAgIGlmIChwb3NpdGlvbiA8IHRoaXMuX19zdGFydFBvc2l0aW9uKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpXG4gICAgICAgICAgdGhpcy5zdG9wKHRpbWUsIHBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uKTtcblxuICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9fc3RhcnRQb3NpdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPCB0aGlzLl9fZW5kUG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zdGFydCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuXG4gICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5fX2VuZFBvc2l0aW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocG9zaXRpb24gPiB0aGlzLl9fZW5kUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpIC8vIGlmIGVuZ2luZSBpcyBydW5uaW5nXG4gICAgICAgICAgdGhpcy5zdG9wKHRpbWUsIHBvc2l0aW9uIC0gdGhpcy5fX29mZnNldFBvc2l0aW9uKTtcblxuICAgICAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZW5kUG9zaXRpb247XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID4gdGhpcy5fX3N0YXJ0UG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zdGFydCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuXG4gICAgICAgIHRoaXMuX19pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5fX3N0YXJ0UG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX19pc1J1bm5pbmcpIC8vIGlmIGVuZ2luZSBpcyBydW5uaW5nXG4gICAgICB0aGlzLnN0b3AodGltZSwgcG9zaXRpb24pO1xuXG4gICAgdGhpcy5fX2lzUnVubmluZyA9IGZhbHNlO1xuICAgIHJldHVybiBJbmZpbml0eSAqIHNwZWVkO1xuICB9XG5cbiAgYWR2YW5jZVBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIGlmICghdGhpcy5fX2lzUnVubmluZykge1xuICAgICAgdGhpcy5zdGFydCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgdGhpcy5fX2lzUnVubmluZyA9IHRydWU7XG5cbiAgICAgIGlmIChzcGVlZCA+IDApXG4gICAgICAgIHJldHVybiB0aGlzLl9fZW5kUG9zaXRpb247XG5cbiAgICAgIHJldHVybiB0aGlzLl9fc3RhcnRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvLyBzdG9wIGVuZ2luZVxuICAgIHRoaXMuc3RvcCh0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbik7XG5cbiAgICB0aGlzLl9faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIEluZmluaXR5ICogc3BlZWQ7XG4gIH1cblxuICBzeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgaWYgKHNwZWVkID09PSAwKSAvLyBzdG9wXG4gICAgICB0aGlzLnN0b3AodGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1hc3RlciA9IG51bGw7XG5cbiAgICB0aGlzLl9fZW5naW5lLm1hc3RlciA9IG51bGw7XG4gICAgdGhpcy5fX2VuZ2luZSA9IG51bGw7XG4gIH1cbn1cblxuLy8gVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZFxuLy8gaGFzIHRvIHN3aXRjaCBvbiBhbmQgb2ZmIHRoZSBzY2hlZHVsZWQgZW5naW5lcyB3aGVuIHRoZSB0cmFuc3BvcnQgaGl0cyB0aGUgZW5naW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvblxuY2xhc3MgVHJhbnNwb3J0ZWRUcmFuc3BvcnRlZCBleHRlbmRzIFRyYW5zcG9ydGVkIHtcbiAgY29uc3RydWN0b3IodHJhbnNwb3J0LCBlbmdpbmUsIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBvZmZzZXRQb3NpdGlvbikge1xuICAgIHN1cGVyKHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO1xuICB9XG5cbiAgc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIGlmIChzcGVlZCA+IDAgJiYgcG9zaXRpb24gPCB0aGlzLl9fZW5kUG9zaXRpb24pXG4gICAgICBwb3NpdGlvbiA9IE1hdGgubWF4KHBvc2l0aW9uLCB0aGlzLl9fc3RhcnRQb3NpdGlvbik7XG4gICAgZWxzZSBpZiAoc3BlZWQgPCAwICYmIHBvc2l0aW9uID49IHRoaXMuX19zdGFydFBvc2l0aW9uKVxuICAgICAgcG9zaXRpb24gPSBNYXRoLm1pbihwb3NpdGlvbiwgdGhpcy5fX2VuZFBvc2l0aW9uKTtcblxuICAgIHJldHVybiB0aGlzLl9fb2Zmc2V0UG9zaXRpb24gKyB0aGlzLl9fZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiAtIHRoaXMuX19vZmZzZXRQb3NpdGlvbiwgc3BlZWQpO1xuICB9XG5cbiAgYWR2YW5jZVBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIHBvc2l0aW9uID0gdGhpcy5fX29mZnNldFBvc2l0aW9uICsgdGhpcy5fX2VuZ2luZS5hZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIHNwZWVkKTtcblxuICAgIGlmIChzcGVlZCA+IDAgJiYgcG9zaXRpb24gPCB0aGlzLl9fZW5kUG9zaXRpb24gfHwgc3BlZWQgPCAwICYmIHBvc2l0aW9uID49IHRoaXMuX19zdGFydFBvc2l0aW9uKVxuICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuXG4gICAgcmV0dXJuIEluZmluaXR5ICogc3BlZWQ7XG4gIH1cblxuICBzeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgaWYgKHRoaXMuX19lbmdpbmUuc3luY1NwZWVkKVxuICAgICAgdGhpcy5fX2VuZ2luZS5zeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgfVxuXG4gIHJlc2V0RW5naW5lUG9zaXRpb24oZW5naW5lLCBwb3NpdGlvbiA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgcG9zaXRpb24gKz0gdGhpcy5fX29mZnNldFBvc2l0aW9uO1xuXG4gICAgdGhpcy5yZXNldFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgfVxufVxuXG4vLyBUcmFuc3BvcnRlZFNwZWVkQ29udHJvbGxlZFxuLy8gaGFzIHRvIHN0YXJ0IGFuZCBzdG9wIHRoZSBzcGVlZC1jb250cm9sbGVkIGVuZ2luZXMgd2hlbiB0aGUgdHJhbnNwb3J0IGhpdHMgdGhlIGVuZ2luZSdzIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25cbmNsYXNzIFRyYW5zcG9ydGVkU3BlZWRDb250cm9sbGVkIGV4dGVuZHMgVHJhbnNwb3J0ZWQge1xuICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQsIGVuZ2luZSwgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIG9mZnNldFBvc2l0aW9uKSB7XG4gICAgc3VwZXIodHJhbnNwb3J0LCBlbmdpbmUsIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBvZmZzZXRQb3NpdGlvbik7XG4gIH1cblxuICBzdGFydCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICB0aGlzLl9fZW5naW5lLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQsIHRydWUpO1xuICB9XG5cbiAgc3RvcCh0aW1lLCBwb3NpdGlvbikge1xuICAgIHRoaXMuX19lbmdpbmUuc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCAwKTtcbiAgfVxuXG4gIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICBpZiAodGhpcy5fX2lzUnVubmluZylcbiAgICAgIHRoaXMuX19lbmdpbmUuc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX19lbmdpbmUuc3luY1NwZWVkKHRoaXMubWFzdGVyLmN1cnJlbnRUaW1lLCB0aGlzLm1hc3Rlci5jdXJyZW50UG9zaXRpb24gLSB0aGlzLl9fb2Zmc2V0UG9zaXRpb24sIDApO1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxufVxuXG4vLyBUcmFuc3BvcnRlZFNjaGVkdWxlZFxuLy8gaGFzIHRvIHN3aXRjaCBvbiBhbmQgb2ZmIHRoZSBzY2hlZHVsZWQgZW5naW5lcyB3aGVuIHRoZSB0cmFuc3BvcnQgaGl0cyB0aGUgZW5naW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvblxuY2xhc3MgVHJhbnNwb3J0ZWRTY2hlZHVsZWQgZXh0ZW5kcyBUcmFuc3BvcnRlZCB7XG4gIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCwgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pIHtcbiAgICBzdXBlcih0cmFuc3BvcnQsIGVuZ2luZSwgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIG9mZnNldFBvc2l0aW9uKTtcblxuICAgIC8vIHNjaGVkdWxpbmcgcXVldWUgYmVjb21lcyBtYXN0ZXIgb2YgZW5naW5lXG4gICAgZW5naW5lLm1hc3RlciA9IG51bGw7XG4gICAgdHJhbnNwb3J0Ll9fc2NoZWR1bGluZ1F1ZXVlLmFkZChlbmdpbmUsIEluZmluaXR5KTtcbiAgfVxuXG4gIHN0YXJ0KHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIHRoaXMubWFzdGVyLl9fc2NoZWR1bGluZ1F1ZXVlLnJlc2V0RW5naW5lVGltZSh0aGlzLl9fZW5naW5lLCB0aW1lKTtcbiAgfVxuXG4gIHN0b3AodGltZSwgcG9zaXRpb24pIHtcbiAgICB0aGlzLm1hc3Rlci5fX3NjaGVkdWxpbmdRdWV1ZS5yZXNldEVuZ2luZVRpbWUodGhpcy5fX2VuZ2luZSwgSW5maW5pdHkpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1hc3Rlci5fX3NjaGVkdWxpbmdRdWV1ZS5yZW1vdmUodGhpcy5fX2VuZ2luZSk7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICB9XG59XG5cbi8vIHRyYW5zbGF0ZXMgYWR2YW5jZVBvc2l0aW9uIG9mICp0cmFuc3BvcnRlZCogZW5naW5lcyBpbnRvIGdsb2JhbCBzY2hlZHVsZXIgdGltZXNcbmNsYXNzIFRyYW5zcG9ydFNjaGVkdWxlckhvb2sgZXh0ZW5kcyBUaW1lRW5naW5lIHtcbiAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX190cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgICB0aGlzLl9fbmV4dFBvc2l0aW9uID0gSW5maW5pdHk7XG4gICAgdGhpcy5fX25leHRUaW1lID0gSW5maW5pdHk7XG4gICAgdHJhbnNwb3J0Ll9fc2NoZWR1bGVyLmFkZCh0aGlzLCBJbmZpbml0eSk7XG4gIH1cblxuICAvLyBUaW1lRW5naW5lIG1ldGhvZCAoc2NoZWR1bGVkIGludGVyZmFjZSlcbiAgYWR2YW5jZVRpbWUodGltZSkge1xuICAgIGNvbnN0IHRyYW5zcG9ydCA9IHRoaXMuX190cmFuc3BvcnQ7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLl9fbmV4dFBvc2l0aW9uO1xuICAgIGNvbnN0IHNwZWVkID0gdHJhbnNwb3J0Ll9fc3BlZWQ7XG4gICAgY29uc3QgbmV4dFBvc2l0aW9uID0gdHJhbnNwb3J0LmFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgIGNvbnN0IG5leHRUaW1lID0gdHJhbnNwb3J0Ll9fZ2V0VGltZUF0UG9zaXRpb24obmV4dFBvc2l0aW9uKTtcblxuICAgIHRoaXMuX19uZXh0UG9zaXRpb24gPSBuZXh0UG9zaXRpb247XG4gICAgdGhpcy5fX25leHRUaW1lID0gbmV4dFRpbWU7XG5cbiAgICByZXR1cm4gbmV4dFRpbWU7XG4gIH1cblxuICByZXNldFBvc2l0aW9uKHBvc2l0aW9uID0gdGhpcy5fX25leHRQb3NpdGlvbikge1xuICAgIGNvbnN0IHRyYW5zcG9ydCA9IHRoaXMuX190cmFuc3BvcnQ7XG4gICAgY29uc3QgdGltZSA9IHRyYW5zcG9ydC5fX2dldFRpbWVBdFBvc2l0aW9uKHBvc2l0aW9uKTtcblxuICAgIHRoaXMuX19uZXh0UG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB0aGlzLl9fbmV4dFRpbWUgPSB0aW1lO1xuXG4gICAgdGhpcy5yZXNldFRpbWUodGltZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX190cmFuc3BvcnQuX19zY2hlZHVsZXIucmVtb3ZlKHRoaXMpO1xuICAgIHRoaXMuX190cmFuc3BvcnQgPSBudWxsO1xuICB9XG59XG5cbi8vIGludGVybmFsIHNjaGVkdWxpbmcgcXVldWUgdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IHBvc2l0aW9uIChhbmQgdGltZSkgb2YgdGhlIHRyYW5zcG9ydFxuY2xhc3MgVHJhbnNwb3J0U2NoZWR1bGluZ1F1ZXVlIGV4dGVuZHMgU2NoZWR1bGluZ1F1ZXVlIHtcbiAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX190cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgdHJhbnNwb3J0Ll9fc2NoZWR1bGVyLmFkZCh0aGlzLCBJbmZpbml0eSk7XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190cmFuc3BvcnQuY3VycmVudFRpbWU7XG4gIH1cblxuICBnZXQgYXVkaW9UaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9fdHJhbnNwb3J0LmF1ZGlvVGltZTtcbiAgfVxuXG4gIGdldCBjdXJyZW50UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX190cmFuc3BvcnQuY3VycmVudFBvc2l0aW9uO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9fdHJhbnNwb3J0Ll9fc2NoZWR1bGVyLnJlbW92ZSh0aGlzKTtcbiAgICB0aGlzLl9fdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGVzIHBvc2l0aW9uLWJhc2VkIHNjaGVkdWxpbmcgb2YgVGltZUVuZ2luZSBpbnN0YW5jZXMuXG4gKlxuICogW2V4YW1wbGVde0BsaW5rIGh0dHBzOi8vcmF3Z2l0LmNvbS93YXZlc2pzL3dhdmVzLW1hc3RlcnMvbWFzdGVyL2V4YW1wbGVzL3RyYW5zcG9ydC9pbmRleC5odG1sfVxuICpcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2NoZWR1bGVyIC0gaW5zdGFuY2Ugb2YgU2NoZWR1bGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIG1hc3RlcnMgZnJvbSAnd2F2ZXMtbWFzdGVycyc7XG4gKlxuICogY29uc3QgZ2V0VGltZUZ1bmN0aW9uID0gKCkgPT4ge1xuICogICBjb25zdCBub3cgPSBwcm9jZXNzLmhydGltZSgpO1xuICogICByZXR1cm4gbm93WzBdICsgbm93WzFdICogMWUtOTtcbiAqIH1cbiAqIGNvbnN0IHNjaGVkdWxlciA9IG5ldyBtYXN0ZXJzLlNjaGVkdWxlcihnZXRUaW1lRnVuY3Rpb24pO1xuICogY29uc3QgdHJhbnNwb3J0ID0gbmV3IG1hc3RlcnMuVHJhbnNwb3J0KHNjaGVkdWxlcik7XG4gKiBjb25zdCBwbGF5Q29udHJvbCA9IG5ldyBtYXN0ZXJzLlBsYXlDb250cm9sKHNjaGVkdWxlciwgdHJhbnNwb3J0KTtcbiAqIGNvbnN0IG15RW5naW5lID0gbmV3IE15RW5naW5lKCk7XG4gKiBjb25zdCB5b3VyRW5naW5lID0gbmV3IHlvdXJFbmdpbmUoKTtcbiAqXG4gKiB0cmFuc3BvcnQuYWRkKG15RW5naW5lKTtcbiAqIHRyYW5zcG9ydC5hZGQoeW91ckVuZ2luZSk7XG4gKlxuICogcGxheUNvbnRyb2wuc3RhcnQoKTtcbiAqL1xuY2xhc3MgVHJhbnNwb3J0IGV4dGVuZHMgVGltZUVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKHNjaGVkdWxlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICghc2NoZWR1bGVyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IGBzY2hlZHVsZXJgLCBzaG91bGQgYmUgYW4gaW5zdGFuY2Ugb2YgYFNjaGVkdWxlcmAnKTtcblxuICAgIHRoaXMuX19lbmdpbmVzID0gW107XG4gICAgdGhpcy5fX3RyYW5zcG9ydGVkID0gW107XG5cbiAgICB0aGlzLl9fc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIHRoaXMuX19zY2hlZHVsZXJIb29rID0gbmV3IFRyYW5zcG9ydFNjaGVkdWxlckhvb2sodGhpcyk7XG4gICAgdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgIHRoaXMuX19zY2hlZHVsaW5nUXVldWUgPSBuZXcgVHJhbnNwb3J0U2NoZWR1bGluZ1F1ZXVlKHRoaXMpO1xuXG4gICAgLy8gc3luY3Jvbml6ZWQgdGltZSwgcG9zaXRpb24sIGFuZCBzcGVlZFxuICAgIHRoaXMuX190aW1lID0gMDtcbiAgICB0aGlzLl9fcG9zaXRpb24gPSAwO1xuICAgIHRoaXMuX19zcGVlZCA9IDA7XG4gIH1cblxuICBfX2dldFRpbWVBdFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgaWYgKHRoaXMuX19zcGVlZCA9PT0gMClcbiAgICAgIHJldHVybiArSW5maW5pdHk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuX190aW1lICsgKHBvc2l0aW9uIC0gdGhpcy5fX3Bvc2l0aW9uKSAvIHRoaXMuX19zcGVlZDtcbiAgfVxuXG4gIF9fZ2V0UG9zaXRpb25BdFRpbWUodGltZSkge1xuICAgIHJldHVybiB0aGlzLl9fcG9zaXRpb24gKyAodGltZSAtIHRoaXMuX190aW1lKSAqIHRoaXMuX19zcGVlZDtcbiAgfVxuXG4gIF9fc3luY1RyYW5zcG9ydGVkUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgY29uc3QgbnVtVHJhbnNwb3J0ZWRFbmdpbmVzID0gdGhpcy5fX3RyYW5zcG9ydGVkLmxlbmd0aDtcbiAgICBsZXQgbmV4dFBvc2l0aW9uID0gSW5maW5pdHkgKiBzcGVlZDtcblxuICAgIGlmIChudW1UcmFuc3BvcnRlZEVuZ2luZXMgPiAwKSB7XG4gICAgICB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5jbGVhcigpO1xuICAgICAgdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUucmV2ZXJzZSA9IChzcGVlZCA8IDApO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRyYW5zcG9ydGVkRW5naW5lczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMuX190cmFuc3BvcnRlZFtpXTtcbiAgICAgICAgY29uc3QgbmV4dEVuZ2luZVBvc2l0aW9uID0gZW5naW5lLnN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgICB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5pbnNlcnQoZW5naW5lLCBuZXh0RW5naW5lUG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBuZXh0UG9zaXRpb24gPSB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS50aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0UG9zaXRpb247XG4gIH1cblxuICBfX3N5bmNUcmFuc3BvcnRlZFNwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIGZvciAobGV0IHRyYW5zcG9ydGVkIG9mIHRoaXMuX190cmFuc3BvcnRlZClcbiAgICAgIHRyYW5zcG9ydGVkLnN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IG1hc3RlciB0aW1lLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAbmFtZSBjdXJyZW50VGltZVxuICAgKiBAbWVtYmVyb2YgVHJhbnNwb3J0XG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3NjaGVkdWxlci5jdXJyZW50VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWFzdGVyIGF1ZGlvIHRpbWUuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBuYW1lIGN1cnJlbnRUaW1lXG4gICAqIEBtZW1iZXJvZiBUcmFuc3BvcnRcbiAgICogQGluc3RhbmNlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGF1ZGlvVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3NjaGVkdWxlci5hdWRpb1RpbWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgbWFzdGVyIHBvc2l0aW9uLiBUaGlzIGdldHRlciB3aWxsIGJlIHJlcGxhY2VkIHdoZW4gdGhlIHRyYW5zcG9ydFxuICAgKiBpcyBhZGRlZCB0byBhIG1hc3RlciAoaS5lLiB0cmFuc3BvcnQgb3IgcGxheS1jb250cm9sKS5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQG5hbWUgY3VycmVudFBvc2l0aW9uXG4gICAqIEBtZW1iZXJvZiBUcmFuc3BvcnRcbiAgICogQGluc3RhbmNlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRQb3NpdGlvbigpIHtcbiAgICBjb25zdCBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgIGlmIChtYXN0ZXIgJiYgbWFzdGVyLmN1cnJlbnRQb3NpdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIG1hc3Rlci5jdXJyZW50UG9zaXRpb247XG5cbiAgICByZXR1cm4gdGhpcy5fX3Bvc2l0aW9uICsgKHRoaXMuX19zY2hlZHVsZXIuY3VycmVudFRpbWUgLSB0aGlzLl9fdGltZSkgKiB0aGlzLl9fc3BlZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgbmV4dCB0cmFuc3BvcnQgcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5leHQgLSB0cmFuc3BvcnQgcG9zaXRpb25cbiAgICovXG4gIHJlc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBjb25zdCBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgIGlmIChtYXN0ZXIgJiYgbWFzdGVyLnJlc2V0RW5naW5lUG9zaXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgIG1hc3Rlci5yZXNldEVuZ2luZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9fc2NoZWR1bGVySG9vay5yZXNldFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgdHJhbnNwb3J0ZWQgdGltZSBlbmdpbmUgaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNwZWVkXG4gICAqL1xuICBzeW5jUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgdGhpcy5fX3RpbWUgPSB0aW1lO1xuICAgIHRoaXMuX19wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIHRoaXMuX19zcGVlZCA9IHNwZWVkO1xuXG4gICAgcmV0dXJuIHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSB0cmFuc3BvcnRlZCB0aW1lIGVuZ2luZSBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gc3BlZWRcbiAgICovXG4gIGFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICBjb25zdCBlbmdpbmUgPSB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5oZWFkO1xuICAgIGNvbnN0IG5leHRFbmdpbmVQb3NpdGlvbiA9IGVuZ2luZS5hZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICByZXR1cm4gdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUubW92ZShlbmdpbmUsIG5leHRFbmdpbmVQb3NpdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50YXRpb24gb2YgdGhlIHRyYW5zcG9ydGVkIHRpbWUgZW5naW5lIGludGVyZmFjZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzcGVlZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzZWVrPWZhbHNlXVxuICAgKi9cbiAgc3luY1NwZWVkKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCwgc2VlayA9IGZhbHNlKSB7XG4gICAgY29uc3QgbGFzdFNwZWVkID0gdGhpcy5fX3NwZWVkO1xuXG4gICAgdGhpcy5fX3RpbWUgPSB0aW1lO1xuICAgIHRoaXMuX19wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIHRoaXMuX19zcGVlZCA9IHNwZWVkO1xuXG4gICAgaWYgKHNwZWVkICE9PSBsYXN0U3BlZWQgfHwgc2Vlaykge1xuICAgICAgbGV0IG5leHRQb3NpdGlvbjtcblxuICAgICAgLy8gcmVzeW5jIHRyYW5zcG9ydGVkIGVuZ2luZXNcbiAgICAgIGlmIChzZWVrIHx8IHNwZWVkICogbGFzdFNwZWVkIDwgMCkge1xuICAgICAgICAvLyBzZWVrIG9yIHJldmVyc2UgZGlyZWN0aW9uXG4gICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgfSBlbHNlIGlmIChsYXN0U3BlZWQgPT09IDApIHtcbiAgICAgICAgLy8gc3RhcnRcbiAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5fX3N5bmNUcmFuc3BvcnRlZFBvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICB9IGVsc2UgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICAgIC8vIHN0b3BcbiAgICAgICAgbmV4dFBvc2l0aW9uID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuX19zeW5jVHJhbnNwb3J0ZWRQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2hhbmdlIHNwZWVkIHdpdGhvdXQgcmV2ZXJzaW5nIGRpcmVjdGlvblxuICAgICAgICB0aGlzLl9fc3luY1RyYW5zcG9ydGVkU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXNldFBvc2l0aW9uKG5leHRQb3NpdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHRpbWUgZW5naW5lIHRvIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbmdpbmUgLSBlbmdpbmUgdG8gYmUgYWRkZWQgdG8gdGhlIHRyYW5zcG9ydFxuICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBzdGFydCBwb3NpdGlvblxuICAgKi9cbiAgYWRkKGVuZ2luZSwgc3RhcnRQb3NpdGlvbiA9IDAsIGVuZFBvc2l0aW9uID0gSW5maW5pdHksIG9mZnNldFBvc2l0aW9uID0gMCkge1xuICAgIGxldCB0cmFuc3BvcnRlZCA9IG51bGw7XG5cbiAgICBpZiAob2Zmc2V0UG9zaXRpb24gPT09IC1JbmZpbml0eSlcbiAgICAgIG9mZnNldFBvc2l0aW9uID0gMDtcblxuICAgIGlmIChlbmdpbmUubWFzdGVyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgdG8gYSBtYXN0ZXJcIik7XG5cbiAgICBpZiAoVGltZUVuZ2luZS5pbXBsZW1lbnRzVHJhbnNwb3J0ZWQoZW5naW5lKSlcbiAgICAgIHRyYW5zcG9ydGVkID0gbmV3IFRyYW5zcG9ydGVkVHJhbnNwb3J0ZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO1xuICAgIGVsc2UgaWYgKFRpbWVFbmdpbmUuaW1wbGVtZW50c1NwZWVkQ29udHJvbGxlZChlbmdpbmUpKVxuICAgICAgdHJhbnNwb3J0ZWQgPSBuZXcgVHJhbnNwb3J0ZWRTcGVlZENvbnRyb2xsZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO1xuICAgIGVsc2UgaWYgKFRpbWVFbmdpbmUuaW1wbGVtZW50c1NjaGVkdWxlZChlbmdpbmUpKVxuICAgICAgdHJhbnNwb3J0ZWQgPSBuZXcgVHJhbnNwb3J0ZWRTY2hlZHVsZWQodGhpcywgZW5naW5lLCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgb2Zmc2V0UG9zaXRpb24pO1xuICAgIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBjYW5ub3QgYmUgYWRkZWQgdG8gYSB0cmFuc3BvcnRcIik7XG5cbiAgICBpZiAodHJhbnNwb3J0ZWQpIHtcbiAgICAgIGNvbnN0IHNwZWVkID0gdGhpcy5fX3NwZWVkO1xuXG4gICAgICBhZGREdXBsZXQodGhpcy5fX2VuZ2luZXMsIHRoaXMuX190cmFuc3BvcnRlZCwgZW5naW5lLCB0cmFuc3BvcnRlZCk7XG5cbiAgICAgIGlmIChzcGVlZCAhPT0gMCkge1xuICAgICAgICAvLyBzeW5jIGFuZCBzdGFydFxuICAgICAgICBjb25zdCBuZXh0RW5naW5lUG9zaXRpb24gPSB0cmFuc3BvcnRlZC5zeW5jUG9zaXRpb24odGhpcy5jdXJyZW50VGltZSwgdGhpcy5jdXJyZW50UG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgY29uc3QgbmV4dFBvc2l0aW9uID0gdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUuaW5zZXJ0KHRyYW5zcG9ydGVkLCBuZXh0RW5naW5lUG9zaXRpb24pO1xuXG4gICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbihuZXh0UG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cmFuc3BvcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSB0aW1lIGVuZ2luZSBmcm9tIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBlbmdpbmVPclRyYW5zcG9ydGVkIC0gZW5naW5lIG9yIHRyYW5zcG9ydGVkIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgdHJhbnNwb3J0XG4gICAqL1xuICByZW1vdmUoZW5naW5lT3JUcmFuc3BvcnRlZCkge1xuICAgIGxldCBlbmdpbmUgPSBlbmdpbmVPclRyYW5zcG9ydGVkO1xuICAgIGxldCB0cmFuc3BvcnRlZCA9IHJlbW92ZUR1cGxldCh0aGlzLl9fZW5naW5lcywgdGhpcy5fX3RyYW5zcG9ydGVkLCBlbmdpbmVPclRyYW5zcG9ydGVkKTtcblxuICAgIGlmICghdHJhbnNwb3J0ZWQpIHtcbiAgICAgIGVuZ2luZSA9IHJlbW92ZUR1cGxldCh0aGlzLl9fdHJhbnNwb3J0ZWQsIHRoaXMuX19lbmdpbmVzLCBlbmdpbmVPclRyYW5zcG9ydGVkKTtcbiAgICAgIHRyYW5zcG9ydGVkID0gZW5naW5lT3JUcmFuc3BvcnRlZDtcbiAgICB9XG5cbiAgICBpZiAoZW5naW5lICYmIHRyYW5zcG9ydGVkKSB7XG4gICAgICBjb25zdCBuZXh0UG9zaXRpb24gPSB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5yZW1vdmUodHJhbnNwb3J0ZWQpO1xuXG4gICAgICB0cmFuc3BvcnRlZC5kZXN0cm95KCk7XG5cbiAgICAgIGlmICh0aGlzLl9fc3BlZWQgIT09IDApXG4gICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbihuZXh0UG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgdHJhbnNwb3J0XCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBwb3NpdGlvbiBvZiB0aGUgZ2l2ZW4gZW5naW5lLlxuICAgKlxuICAgKiBAcGFyYW0ge1RpbWVFbmdpbmV9IHRyYW5zcG9ydGVkIC0gRW5naW5lIHRvIHJlc2V0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIE5ldyBwb3NpdGlvblxuICAgKi9cbiAgcmVzZXRFbmdpbmVQb3NpdGlvbih0cmFuc3BvcnRlZCwgcG9zaXRpb24gPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzcGVlZCA9IHRoaXMuX19zcGVlZDtcblxuICAgIGlmIChzcGVlZCAhPT0gMCkge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpXG4gICAgICAgIHBvc2l0aW9uID0gdHJhbnNwb3J0ZWQuc3luY1Bvc2l0aW9uKHRoaXMuY3VycmVudFRpbWUsIHRoaXMuY3VycmVudFBvc2l0aW9uLCBzcGVlZCk7XG5cbiAgICAgIGxldCBuZXh0UG9zaXRpb24gPSBudWxsO1xuXG4gICAgICAvLyB0aGUgcHJpb3JpdHkgcXVldWUgZG9lcyBub3Qga2VlcCB0cmFjayBvZiB0aGUgZWxlbWVudHMgdGhhdCBhcmVcbiAgICAgIC8vIGluc2VydGVkIGF0IEluZmluaXR5LCBzbyB3ZSBuZWVkIHRvIHJlaW5zZXJ0IHRyYW5zcG9ydGVkIGVuZ2luZSBpblxuICAgICAgLy8gdGhpcyBjYXNlLlxuICAgICAgLy8gQG5vdGUgLSB0aGlzIGNvdWxkIHByb2JhYmx5IGJlIG1vcmUgY2xlYW5cbiAgICAgIC8vICAgICAgIC0gcHJvYmFibHkgdGhlIHByaW9yaXR5IHF1ZXVlIHNob3VsZCBrZWVwIHRoZXNlIHJlZmVyZW5jZXNcbiAgICAgIGlmICghdGhpcy5fX3RyYW5zcG9ydGVkUXVldWUuaGFzKHRyYW5zcG9ydGVkKSkge1xuICAgICAgICBuZXh0UG9zaXRpb24gPSB0aGlzLl9fdHJhbnNwb3J0ZWRRdWV1ZS5pbnNlcnQodHJhbnNwb3J0ZWQsIHBvc2l0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMuX190cmFuc3BvcnRlZFF1ZXVlLm1vdmUodHJhbnNwb3J0ZWQsIHBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXNldFBvc2l0aW9uKG5leHRQb3NpdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgdGltZSBlbmdpbmVzIGZyb20gdGhlIHRyYW5zcG9ydC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc3luY1NwZWVkKHRoaXMuY3VycmVudFRpbWUsIHRoaXMuY3VycmVudFBvc2l0aW9uLCAwKTtcblxuICAgIGZvciAobGV0IHRyYW5zcG9ydGVkIG9mIHRoaXMuX190cmFuc3BvcnRlZClcbiAgICAgIHRyYW5zcG9ydGVkLmRlc3Ryb3koKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc3BvcnQ7XG4iXX0=